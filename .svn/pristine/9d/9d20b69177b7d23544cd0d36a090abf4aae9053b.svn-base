package com.yinlong.web;

import java.io.IOException;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yinlong.entity.Feedback;
import com.yinlong.entity.PlaceFile;
import com.yinlong.entity.ProblemType;
import com.yinlong.entity.Process;
import com.yinlong.entity.ProcessRecord;
import com.yinlong.service.IFeedbackService;
import com.yinlong.service.IPlaceFileService;
import com.yinlong.service.IProcessRecordService;
import com.yinlong.util.AddProcessRecordUtil;
import com.yinlong.util.LayuiTableData;
import com.yinlong.util.NextProcess;
import com.yinlong.util.PrListsUtil;

@Controller("placeFileAction")
@Scope("prototype")
public class PlaceFileAction {

	@Resource(name = "placeFileService")
	private IPlaceFileService placeFileService;
	
	@Resource(name = "feedbackService")
	private IFeedbackService feedbackService;
	@Resource(name = "processRecordService")
	private IProcessRecordService processRecordService;
	
	private PlaceFile placeFile;
	private Feedback feedback;
	private Process process;
	
	private List<ProblemType> problemTypeList;
	private List<PlaceFile> placeFileList;
	private List<ProcessRecord> prList;
	
	/**
	 * 保存并关闭异常归档（即可以开始下一步）
	 * @return
	 */
	public String doAddPlaceFile() {
		feedback = feedbackService.findFeedbackById(feedback);		// 获得完整的feedback
		problemTypeList.removeAll(Collections.singleton(null));		// 删除该list里的null值
		placeFile.setPtSet(new HashSet<ProblemType>(problemTypeList));	
		placeFile.setFeedback(feedback);							// 将feedback与placeFile绑定
		if (placeFileService.addPlaceFile(placeFile)) {
			AddProcessRecordUtil.addProcessRecord(feedback, feedback.getProcess(), "保存并关闭异常归档成功");
			NextProcess.nextProcess(feedback, process);				// 修改下一流程节点
		}
		return "doAddPlaceFile";
	}
	
	/**
	 * 保存异常归档（即只能编辑不可以进行下一步）
	 * @return
	 */
	public String doNoAddPlaceFile() {
		feedback = feedbackService.findFeedbackById(feedback);	// 取出完整的feedback
		placeFile.setFeedback(feedback);						// 将feedback与placeFile绑定
		if (placeFileService.addPlaceFile(placeFile)) {
			AddProcessRecordUtil.addProcessRecord(feedback, feedback.getProcess(), "保存异常归档成功");
		}
		return "";
	}
	
	/**
	 * 根据ID查询PlaceFile
	 * @return
	 */
	public String findPlacefileById() {
		placeFile = placeFileService.findPlaceFileById(placeFile);
		return "findPlacefileById";
	}
	
	/**
	 * 进入考核通报页面并查询相对应的考核单和归档信息
	 * @return
	 */
	public String findPlaceFileById() {
		placeFile = placeFileService.findPlaceFileById(placeFile);
		prList = processRecordService.findProcessRecordByFeedbackId(placeFile.getFeedback());
		PrListsUtil.findPrList(prList);
		return "findPlaceFileById";
	}

	/**
	 * 进入限期整改页面并查询相对应的考核单和归档信息
	 * @return
	 */
	public String findPlaceFileByIdOnDeadline() {
		placeFile = placeFileService.findPlaceFileById(placeFile);
		prList = processRecordService.findProcessRecordByFeedbackId(placeFile.getFeedback());
		PrListsUtil.findPrList(prList);
		return "findPlaceFileByIdOnDeadline";
	}

	/**
	 * 查询所有的PlaceFile
	 * @throws IOException 
	 */
	public void findPlaceFileList() throws IOException {
		placeFileList = placeFileService.findPlaceFileList();
		int count = placeFileList.size();
		LayuiTableData.layuiTableUserList(0, "", count, placeFileList);
	}
	
	/**
	 * 查询所有待考核通报的PlaceFile
	 * @throws IOException 
	 */
	public void findPlaceFileListPending() throws IOException {
		placeFileList = placeFileService.findPlaceFileListPending(4);
		int count = placeFileList.size();
		LayuiTableData.layuiTableUserList(0, "", count, placeFileList);
	}

	/**
	 * 查询所有待限期整改的PlaceFile
	 * @throws IOException
	 */
	public void findPlaceFileListOnDeadline() throws IOException {
		placeFileList = placeFileService.findPlaceFileListPending(5);
		int count = placeFileList.size();
		LayuiTableData.layuiTableUserList(0, "", count, placeFileList);
	}
	
	
	public PlaceFile getPlaceFile() {
		return placeFile;
	}

	public void setPlaceFile(PlaceFile placeFile) {
		this.placeFile = placeFile;
	}

	public void setPlaceFileService(IPlaceFileService placeFileService) {
		this.placeFileService = placeFileService;
	}

	public Feedback getFeedback() {
		return feedback;
	}

	public void setFeedback(Feedback feedback) {
		this.feedback = feedback;
	}

	public Process getProcess() {
		return process;
	}

	public void setProcess(Process process) {
		this.process = process;
	}

	public List<PlaceFile> getPlaceFileList() {
		return placeFileList;
	}

	public void setPlaceFileList(List<PlaceFile> placeFileList) {
		this.placeFileList = placeFileList;
	}

	public void setFeedbackService(IFeedbackService feedbackService) {
		this.feedbackService = feedbackService;
	}

	public List<ProblemType> getProblemTypeList() {
		return problemTypeList;
	}

	public void setProblemTypeList(List<ProblemType> problemTypeList) {
		this.problemTypeList = problemTypeList;
	}

	public List<ProcessRecord> getPrList() {
		return prList;
	}

	public void setPrList(List<ProcessRecord> prList) {
		this.prList = prList;
	}

	public void setProcessRecordService(IProcessRecordService processRecordService) {
		this.processRecordService = processRecordService;
	}
}
