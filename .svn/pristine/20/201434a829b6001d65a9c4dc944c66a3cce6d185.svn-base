package com.yinlong.web;


import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yinlong.entity.Appraise;
import com.yinlong.entity.Deadline;
import com.yinlong.entity.Department;
import com.yinlong.entity.Feedback;
import com.yinlong.entity.Notified;
import com.yinlong.entity.Process;
import com.yinlong.entity.ProcessRecord;
import com.yinlong.service.IDeadlineService;
import com.yinlong.service.IFeedbackService;
import com.yinlong.service.INotifiedService;
import com.yinlong.service.IProcessRecordService;
import com.yinlong.service.IProcessService;
import com.yinlong.util.AddProcessRecordUtil;
import com.yinlong.util.LayuiTableData;

@Controller("feedbackAction")
@Scope("prototype")
public class FeedbackAction {

	@Resource(name = "feedbackService")
	private IFeedbackService feedbackService;
	@Resource(name = "processService")
	private IProcessService processService;
	@Resource(name = "processRecordService")
	private IProcessRecordService processRecordService;
	@Resource(name = "notifiedService")
	private INotifiedService notifiedService;
	@Resource(name = "deadlineService")
	private IDeadlineService deadlineService;
	
	private Feedback feedback;		
	private Process process;
	private ProcessRecord processRecord;
	private Notified notified;
	private Deadline deadline;
	
	private List<Feedback> feedbackList;
	private List<Appraise> appList;

	/**
	 * 填写新的反馈单
	 * @return
	 */
	public String addFeedback() {
		String result = "";
		appList.removeAll(Collections.singleton(null));	// 清除空值
		feedback.setAppSet(new HashSet<Appraise>(appList));
		feedback.setDocCreateDate(new Date());
		//当前反馈单是否保存成功
		if(feedbackService.addOrUpdateFeedback(feedback)) {
			result = "填写成功";			// 保存成功则在操作流程中记录成功
		} else {
			result = "填写失败";			// 保存失败则在操作流程中记录失败
		}
		feedback.getProcess().setProId(1);			// 当前操作的流程节点
		AddProcessRecordUtil.addProcessRecord(feedback, feedback.getProcess(), result);	// 保存此次操作
		return "addFeedback";
	}

	/**
	 * 根据Notified查询Feedback
	 * @return
	 */
	public String findFeedbackByNotified() {
		notified = notifiedService.findNotifiedById(notified);
		feedback = notified.getPlaceFile().getFeedback();
		return "findFeedbackByNotified";
	}

	/**
	 * 根据Notified查询Feedback
	 * @return
	 */
	public String findFeedbackByDeadline() {
		deadline = deadlineService.findDeadlineById(deadline);
		feedback = deadline.getPlaceFile().getFeedback();
		return "findFeedbackByDeadline";
	}
	
	/**
	 * 查询所有反馈单
	 */
	public void findFeedbackList() throws IOException {
		feedbackList = feedbackService.findfeedbackListBending();
		LayuiTableData.layuiTableUserList(0, null, feedbackList.size(), feedbackList);
	}
	
	
	public void setFeedbackService(IFeedbackService feedbackService) {
		this.feedbackService = feedbackService;
	}
	public Feedback getFeedback() {
		return feedback;
	}
	public void setFeedback(Feedback feedback) {
		this.feedback = feedback;
	}
	public Process getProcess() {
		return process;
	}
	public void setProcess(Process process) {
		this.process = process;
	}
	public ProcessRecord getProcessRecord() {
		return processRecord;
	}
	public void setProcessRecord(ProcessRecord processRecord) {
		this.processRecord = processRecord;
	}
	public void setProcessService(IProcessService processService) {
		this.processService = processService;
	}
	public void setProcessRecordService(IProcessRecordService processRecordService) {
		this.processRecordService = processRecordService;
	}

	public List<Feedback> getFeedbackList() {
		return feedbackList;
	}

	public void setFeedbackList(List<Feedback> feedbackList) {
		this.feedbackList = feedbackList;
	}

	public List<Appraise> getAppList() {
		return appList;
	}

	public void setAppList(List<Appraise> appList) {
		this.appList = appList;
	}

	public Notified getNotified() {
		return notified;
	}

	public void setNotified(Notified notified) {
		this.notified = notified;
	}

	public void setNotifiedService(INotifiedService notifiedService) {
		this.notifiedService = notifiedService;
	}

	public Deadline getDeadline() {
		return deadline;
	}

	public void setDeadline(Deadline deadline) {
		this.deadline = deadline;
	}

	public void setDeadlineService(IDeadlineService deadlineService) {
		this.deadlineService = deadlineService;
	}
	
}
